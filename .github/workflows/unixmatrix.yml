# This file generates .deb (Unix) and .nupkg (Windows) files
on:
    push:
        branches: '**'
        tags: '' # Restrict to blank tags
    pull_request:

jobs:
 # This job may be commented if a new release should not be created...
 deploy:
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: true
        tag_name: autotagname-${{ github.sha }}
        release_name: autotagname-${{ github.sha }}
      if: (github.event_name != 'pull_request')&&(github.ref_name == 'master')

 unixmatrix:
    runs-on: ${{ matrix.cfg.os }}
    defaults:
        run:
            shell: ${{ matrix.cfg.shell }}
    strategy:
        fail-fast: false
        matrix:
            cfg:
            - { os: windows-2022, shell: cmd, arch: x64, runtime: vc17, cmake_params: '-G "Visual Studio 17" -A x64', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', test_config: 'Release/', desc: 'Windows Visual Studio 2022 x64' }
            - { os: windows-2022, shell: cmd, arch: x86, runtime: vc17, cmake_params: '-G "Visual Studio 17" -A Win32', choco_flags: '--x86', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', test_config: 'Release/', desc: 'Windows Visual Studio 2022 x86' }
            - { os: windows-2019, shell: cmd, arch: x64, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A x64', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', test_config: 'Release/', desc: 'Windows Visual Studio 2019 x64' }
            - { os: windows-2019, shell: cmd, arch: x86, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A Win32', choco_flags: '--x86', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', test_config: 'Release/', desc: 'Windows Visual Studio 2019 x86' }
            - { os: windows-2019, shell: cmd, arch: x64, runtime: vc15, cmake_params: '-G "Visual Studio 16" -T v141 -A x64', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', test_config: 'Release/', desc: 'Windows Visual Studio 2017 x64' }
            - { os: windows-2019, shell: cmd, arch: x86, runtime: vc15, cmake_params: '-G "Visual Studio 16" -T v141 -A Win32', choco_flags: '--x86', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', test_config: 'Release/', desc: 'Windows Visual Studio 2017 x86' }
            - { os: windows-2019, shell: cmd, arch: x64, runtime: mingw8, cmake_params: '-G "MSYS Makefiles"', cmake_flags: '-fPIC', desc: 'Windows MinGW 8.1.0 x64' }
            - { os: windows-2019, shell: cmd, arch: x86, runtime: mingw8, cmake_params: '-G "MSYS Makefiles"', cmake_flags: '-fPIC', choco_flags: '--x86', desc: 'Windows MinGW 8.1.0 x86' }
            - { os: windows-2019, shell: cmd, arch: x86, runtime: mingw7, cmake_params: '-G "MSYS Makefiles"', cmake_flags: '-fPIC', choco_flags: '--x86', desc: 'Windows Qt 5.12.6 MinGW 7.3.0 x86' }
            - { os: ubuntu-22.04, shell: bash, arch: amd64, runtime: jammy, cmake_flags: '-fPIC', desc: 'Ubuntu 22.04' }
            - { os: ubuntu-20.04, shell: bash, arch: amd64, runtime: focal, cmake_flags: '-fPIC', desc: 'Ubuntu 20.04' }
            - { os: ubuntu-18.04, shell: bash, arch: amd64, runtime: bionic, cmake_flags: '-fPIC', desc: 'Ubuntu 18.04' }
            - { os: macos-12, shell: bash, arch: x64, runtime: monterey, cmake_flags: '-fPIC', desc: 'macOS Monterey' }
            - { os: macos-11, shell: bash, arch: x64, runtime: bigsur, cmake_flags: '-fPIC', desc: 'macOS Big Sur' }
    name: ${{ matrix.cfg.desc }}
    steps: 
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
        clean: false
      # From https://github.com/Munkei/VersionFromGit.cmake/blob/master/VersionFromGit.cmake
    - run: echo "git_tag=`git describe --tags --abbrev=0`" >> $GITHUB_ENV
      shell: bash
      # See https://askubuntu.com/questions/620533/what-is-the-meaning-of-the-xubuntuy-string-in-ubuntu-package-names
    - run: |
        echo "SOFTWARE_VERSION=${git_tag:1}" >> $GITHUB_ENV
        echo "DEBIAN_PACKAGE_REV=0" >> $GITHUB_ENV
        echo "PACKAGE_REV=0" >> $GITHUB_ENV
        echo "CHOCO_PACKAGE_REV=" >> $GITHUB_ENV
        echo "VERBOSE=1" >> $GITHUB_ENV
      shell: bash
    - run: if [ -z "$CHOCO_PACKAGE_REV" ]; then echo "PACKAGE_VERSION=$SOFTWARE_VERSION" >> $GITHUB_ENV ; else echo "PACKAGE_VERSION=$SOFTWARE_VERSION.$CHOCO_PACKAGE_REV" >> $GITHUB_ENV ; fi
      shell: bash
      if: runner.os=='Windows'
    - run: echo "PACKAGE_VERSION=$SOFTWARE_VERSION-${DEBIAN_PACKAGE_REV}${{ matrix.cfg.runtime }}$PACKAGE_REV" >> $GITHUB_ENV
      shell: bash
      if: runner.os=='Linux'
#    - run: |
#        choco install -y -r --no-progress wget
#        wget http://download.qt.io/archive/qt/5.12/5.12.6/qt-opensource-windows-x86-5.12.6.exe --no-check-certificate -nv
#        move /Y qt-opensource-windows-x86-5.12.6.exe %SystemDrive%\
#        wget http://www.ensta-bretagne.fr/lebars/Share/qt-installer-5.12.6-mingw73_32.qs --no-check-certificate -nv
#        move /Y qt-installer-5.12.6-mingw73_32.qs %SystemDrive%\
#        netsh advfirewall set allprofiles state on
#        netsh advfirewall firewall add rule name="Qt offline installer" dir=out action=block program="%SystemDrive%\qt-opensource-windows-x86-5.12.6.exe" enable=yes
#        rem Take several min...
#        %SystemDrive%\qt-opensource-windows-x86-5.12.6.exe --script %SystemDrive%\qt-installer-5.12.6-mingw73_32.qs
#        netsh advfirewall firewall del rule name="Qt offline installer"
#        netsh advfirewall set allprofiles state off
#        del /f /q %SystemDrive%\qt-opensource-windows-x86-5.12.6.exe
#        echo C:\Qt\Qt5.12.6\5.12.6\mingw73_32\bin;C:\Qt\Qt5.12.6\Tools\mingw730_32\bin>>%GITHUB_PATH%
#      if: (runner.os=='Windows')&&(matrix.cfg.runtime=='mingw7')
    - run: |
        choco install -y -r --no-progress mingw --version=7.3.0 --force ${{ matrix.cfg.choco_flags }}
        echo C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin>>%GITHUB_PATH%
        choco install -y -r --no-progress ibex --version=2.8.9.20220413 --ignore-dependencies ${{ matrix.cfg.choco_flags }}
      if: (runner.os=='Windows')&&(matrix.cfg.runtime=='mingw7')&&(matrix.cfg.arch=='x86')
    - run: |
        choco install -y -r --no-progress mingw --version=8.1.0 --force ${{ matrix.cfg.choco_flags }}
        echo C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin>>%GITHUB_PATH%
      if: (runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8')&&(matrix.cfg.arch=='x86')
    - run: |
        choco install -y -r --no-progress checksum wget winflexbison make patch zip ${{ matrix.cfg.choco_flags }}
        choco install -y -r --no-progress eigen --version=3.4.0 ${{ matrix.cfg.choco_flags }}
        choco install -y -r --no-progress ibex --version=2.8.9.20220413 ${{ matrix.cfg.choco_flags }}
      if: runner.os=='Windows'
#    - run: sudo apt-get -q update ; sudo apt-get -y install flex bison libeigen3-dev || true
#      shell: bash
#      if: runner.os=='Linux'
    - run: |
        sudo sh -c 'echo "deb [trusted=yes] https://www.ensta-bretagne.fr/packages/`lsb_release --id -s | tr [:upper:] [:lower:]`/`lsb_release -cs` ./" > /etc/apt/sources.list.d/ensta-bretagne.list'
        sudo apt-get -q update ; sudo apt-get -y install libibex-dev libeigen3-dev dpkg-dev || true
      shell: bash
      if: runner.os=='Linux'
    - run: brew install eigen
      if: runner.os=='macOS'
    - run: git clone -b actions https://github.com/lebarsfa/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -E env CXXFLAGS="${{ matrix.cfg.cmake_flags }}" CFLAGS="${{ matrix.cfg.cmake_flags }}" cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_INSTALL_PREFIX="../../ibex" .. ; cmake --build . --config Release --target install ; cd ../..
      shell: bash
      if: ((runner.os=='Windows')&&(matrix.cfg.runtime!='mingw8'))||((runner.os!='Windows')&&(runner.os!='Linux'))
    - run: |
        mkdir build ; cd build
        cmake -E env CXXFLAGS="${{ matrix.cfg.cmake_flags }}" CFLAGS="${{ matrix.cfg.cmake_flags }}" cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" ..
        cmake --build . --config Debug --target install
        cd ..
      shell: bash
    - run: |
        mkdir -p codac_standalone/example ; cd codac_standalone
        wget https://community.chocolatey.org/api/v2/package/eigen/3.4.0 --no-check-certificate -nv ; unzip -q 3.4.0 -d eigen ; rm -Rf 3.4.0 eigen/*.xml eigen/*.nuspec eigen/_* eigen/package eigen/tools
        cp -Rf ../ibex . ; cp -Rf ../codac . ; cp -Rf ../tests/test_codac/* ./example/ ; cd .. ; zip -q -r codac_standalone_${{ matrix.cfg.arch }}_${{ matrix.cfg.runtime }}.zip codac_standalone ; cd codac_standalone/example
        cmake ${{ matrix.cfg.cmake_params }} .
        cmake --build . --config Release
        ./${{ matrix.cfg.test_config }}my_project
        cd ../..
      shell: bash
      if: ((runner.os=='Windows')&&(matrix.cfg.runtime!='mingw8'))||((runner.os!='Windows')&&(runner.os!='Linux'))
    - run: |
        cd packages/choco
        cp -Rf ../../codac/* codac
        sed_param=s/\<version\>1\<\\/version\>/\<version\>${PACKAGE_VERSION}\<\\/version\>/
        sed -i "$sed_param" codac/codac.nuspec
        sed_param=s/PATH_SUFFIXES\ /PATHS\ \$\{CMAKE_CURRENT_LIST_FILE\}\\/..\\/..\\/..\\/..\\/\ PATH_SUFFIXES\ /
        sed -i "$sed_param" codac/share/codac/cmake/*.cmake
        mv -f codac codac.$PACKAGE_VERSION
        cd codac.$PACKAGE_VERSION
        choco pack
        mv -f codac.$PACKAGE_VERSION.nupkg ../../../
        cd ../../..
        checksum -f=codac.$PACKAGE_VERSION.nupkg -t=sha256
        choco source add -n=current-directory -s . --priority=100
        choco install -y -r --no-progress codac --version=$PACKAGE_VERSION ${{ matrix.cfg.choco_flags }}
        mv -f codac.$PACKAGE_VERSION.nupkg codac.$PACKAGE_VERSION${{ matrix.cfg.choco_flags }}.nupkg
      shell: bash
      if: (runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8')
    - run: |
        cd packages
        chmod +x ./genlibcodac-dev.sh
        ./genlibcodac-dev.sh ubuntu ${{ matrix.cfg.runtime }} ${{ matrix.cfg.arch }} $SOFTWARE_VERSION $DEBIAN_PACKAGE_REV $PACKAGE_REV
        cd ..
        sudo dpkg -i libcodac-dev-$PACKAGE_VERSION\_${{ matrix.cfg.arch }}.deb
      shell: bash
      if: runner.os=='Linux'
    - run: |
        rm -Rf codac
        cd tests/test_codac
        cmake ${{ matrix.cfg.cmake_params }} .
        cmake --build . --config Release
        ./${{ matrix.cfg.test_config }}my_project
      shell: bash
      if: ((runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8'))||(runner.os=='Linux')
    - uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "*.zip;*.nupkg;*.deb"
        overwrite: true
        tag_name: autotagname-${{ github.sha }}
      if: (github.event_name != 'pull_request')&&(github.ref_name == 'master')
